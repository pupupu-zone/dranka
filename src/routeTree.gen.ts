/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './core/routes/__root'
import { Route as CountriesRouteImport } from './core/routes/countries/route'
import { Route as IndexImport } from './core/routes/index'
import { Route as CountriesIndexImport } from './core/routes/countries/index'
import { Route as CountriesCountryImport } from './core/routes/countries/$country'

// Create/Update Routes

const CountriesRouteRoute = CountriesRouteImport.update({
  id: '/countries',
  path: '/countries',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CountriesIndexRoute = CountriesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CountriesRouteRoute,
} as any)

const CountriesCountryRoute = CountriesCountryImport.update({
  id: '/$country',
  path: '/$country',
  getParentRoute: () => CountriesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/countries': {
      id: '/countries'
      path: '/countries'
      fullPath: '/countries'
      preLoaderRoute: typeof CountriesRouteImport
      parentRoute: typeof rootRoute
    }
    '/countries/$country': {
      id: '/countries/$country'
      path: '/$country'
      fullPath: '/countries/$country'
      preLoaderRoute: typeof CountriesCountryImport
      parentRoute: typeof CountriesRouteImport
    }
    '/countries/': {
      id: '/countries/'
      path: '/'
      fullPath: '/countries/'
      preLoaderRoute: typeof CountriesIndexImport
      parentRoute: typeof CountriesRouteImport
    }
  }
}

// Create and export the route tree

interface CountriesRouteRouteChildren {
  CountriesCountryRoute: typeof CountriesCountryRoute
  CountriesIndexRoute: typeof CountriesIndexRoute
}

const CountriesRouteRouteChildren: CountriesRouteRouteChildren = {
  CountriesCountryRoute: CountriesCountryRoute,
  CountriesIndexRoute: CountriesIndexRoute,
}

const CountriesRouteRouteWithChildren = CountriesRouteRoute._addFileChildren(
  CountriesRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/countries': typeof CountriesRouteRouteWithChildren
  '/countries/$country': typeof CountriesCountryRoute
  '/countries/': typeof CountriesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/countries/$country': typeof CountriesCountryRoute
  '/countries': typeof CountriesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/countries': typeof CountriesRouteRouteWithChildren
  '/countries/$country': typeof CountriesCountryRoute
  '/countries/': typeof CountriesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/countries' | '/countries/$country' | '/countries/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/countries/$country' | '/countries'
  id: '__root__' | '/' | '/countries' | '/countries/$country' | '/countries/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CountriesRouteRoute: typeof CountriesRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CountriesRouteRoute: CountriesRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/countries"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/countries": {
      "filePath": "countries/route.tsx",
      "children": [
        "/countries/$country",
        "/countries/"
      ]
    },
    "/countries/$country": {
      "filePath": "countries/$country.tsx",
      "parent": "/countries"
    },
    "/countries/": {
      "filePath": "countries/index.tsx",
      "parent": "/countries"
    }
  }
}
ROUTE_MANIFEST_END */
