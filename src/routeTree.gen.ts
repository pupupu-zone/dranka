/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './core/routes/__root'
import { Route as RotateRouteImport } from './core/routes/rotate/route'
import { Route as ExportRouteImport } from './core/routes/export/route'
import { Route as EffectsRouteImport } from './core/routes/effects/route'
import { Route as CropRouteImport } from './core/routes/crop/route'
import { Route as ColorRouteImport } from './core/routes/color/route'
import { Route as BwRouteImport } from './core/routes/bw/route'
import { Route as IndexImport } from './core/routes/index'
import { Route as RotateIndexImport } from './core/routes/rotate/index'
import { Route as ExportIndexImport } from './core/routes/export/index'
import { Route as EffectsIndexImport } from './core/routes/effects/index'
import { Route as CropIndexImport } from './core/routes/crop/index'
import { Route as ColorIndexImport } from './core/routes/color/index'
import { Route as BwIndexImport } from './core/routes/bw/index'

// Create/Update Routes

const RotateRouteRoute = RotateRouteImport.update({
  id: '/rotate',
  path: '/rotate',
  getParentRoute: () => rootRoute,
} as any)

const ExportRouteRoute = ExportRouteImport.update({
  id: '/export',
  path: '/export',
  getParentRoute: () => rootRoute,
} as any)

const EffectsRouteRoute = EffectsRouteImport.update({
  id: '/effects',
  path: '/effects',
  getParentRoute: () => rootRoute,
} as any)

const CropRouteRoute = CropRouteImport.update({
  id: '/crop',
  path: '/crop',
  getParentRoute: () => rootRoute,
} as any)

const ColorRouteRoute = ColorRouteImport.update({
  id: '/color',
  path: '/color',
  getParentRoute: () => rootRoute,
} as any)

const BwRouteRoute = BwRouteImport.update({
  id: '/bw',
  path: '/bw',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RotateIndexRoute = RotateIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RotateRouteRoute,
} as any)

const ExportIndexRoute = ExportIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ExportRouteRoute,
} as any)

const EffectsIndexRoute = EffectsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EffectsRouteRoute,
} as any)

const CropIndexRoute = CropIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CropRouteRoute,
} as any)

const ColorIndexRoute = ColorIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ColorRouteRoute,
} as any)

const BwIndexRoute = BwIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BwRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/bw': {
      id: '/bw'
      path: '/bw'
      fullPath: '/bw'
      preLoaderRoute: typeof BwRouteImport
      parentRoute: typeof rootRoute
    }
    '/color': {
      id: '/color'
      path: '/color'
      fullPath: '/color'
      preLoaderRoute: typeof ColorRouteImport
      parentRoute: typeof rootRoute
    }
    '/crop': {
      id: '/crop'
      path: '/crop'
      fullPath: '/crop'
      preLoaderRoute: typeof CropRouteImport
      parentRoute: typeof rootRoute
    }
    '/effects': {
      id: '/effects'
      path: '/effects'
      fullPath: '/effects'
      preLoaderRoute: typeof EffectsRouteImport
      parentRoute: typeof rootRoute
    }
    '/export': {
      id: '/export'
      path: '/export'
      fullPath: '/export'
      preLoaderRoute: typeof ExportRouteImport
      parentRoute: typeof rootRoute
    }
    '/rotate': {
      id: '/rotate'
      path: '/rotate'
      fullPath: '/rotate'
      preLoaderRoute: typeof RotateRouteImport
      parentRoute: typeof rootRoute
    }
    '/bw/': {
      id: '/bw/'
      path: '/'
      fullPath: '/bw/'
      preLoaderRoute: typeof BwIndexImport
      parentRoute: typeof BwRouteImport
    }
    '/color/': {
      id: '/color/'
      path: '/'
      fullPath: '/color/'
      preLoaderRoute: typeof ColorIndexImport
      parentRoute: typeof ColorRouteImport
    }
    '/crop/': {
      id: '/crop/'
      path: '/'
      fullPath: '/crop/'
      preLoaderRoute: typeof CropIndexImport
      parentRoute: typeof CropRouteImport
    }
    '/effects/': {
      id: '/effects/'
      path: '/'
      fullPath: '/effects/'
      preLoaderRoute: typeof EffectsIndexImport
      parentRoute: typeof EffectsRouteImport
    }
    '/export/': {
      id: '/export/'
      path: '/'
      fullPath: '/export/'
      preLoaderRoute: typeof ExportIndexImport
      parentRoute: typeof ExportRouteImport
    }
    '/rotate/': {
      id: '/rotate/'
      path: '/'
      fullPath: '/rotate/'
      preLoaderRoute: typeof RotateIndexImport
      parentRoute: typeof RotateRouteImport
    }
  }
}

// Create and export the route tree

interface BwRouteRouteChildren {
  BwIndexRoute: typeof BwIndexRoute
}

const BwRouteRouteChildren: BwRouteRouteChildren = {
  BwIndexRoute: BwIndexRoute,
}

const BwRouteRouteWithChildren =
  BwRouteRoute._addFileChildren(BwRouteRouteChildren)

interface ColorRouteRouteChildren {
  ColorIndexRoute: typeof ColorIndexRoute
}

const ColorRouteRouteChildren: ColorRouteRouteChildren = {
  ColorIndexRoute: ColorIndexRoute,
}

const ColorRouteRouteWithChildren = ColorRouteRoute._addFileChildren(
  ColorRouteRouteChildren,
)

interface CropRouteRouteChildren {
  CropIndexRoute: typeof CropIndexRoute
}

const CropRouteRouteChildren: CropRouteRouteChildren = {
  CropIndexRoute: CropIndexRoute,
}

const CropRouteRouteWithChildren = CropRouteRoute._addFileChildren(
  CropRouteRouteChildren,
)

interface EffectsRouteRouteChildren {
  EffectsIndexRoute: typeof EffectsIndexRoute
}

const EffectsRouteRouteChildren: EffectsRouteRouteChildren = {
  EffectsIndexRoute: EffectsIndexRoute,
}

const EffectsRouteRouteWithChildren = EffectsRouteRoute._addFileChildren(
  EffectsRouteRouteChildren,
)

interface ExportRouteRouteChildren {
  ExportIndexRoute: typeof ExportIndexRoute
}

const ExportRouteRouteChildren: ExportRouteRouteChildren = {
  ExportIndexRoute: ExportIndexRoute,
}

const ExportRouteRouteWithChildren = ExportRouteRoute._addFileChildren(
  ExportRouteRouteChildren,
)

interface RotateRouteRouteChildren {
  RotateIndexRoute: typeof RotateIndexRoute
}

const RotateRouteRouteChildren: RotateRouteRouteChildren = {
  RotateIndexRoute: RotateIndexRoute,
}

const RotateRouteRouteWithChildren = RotateRouteRoute._addFileChildren(
  RotateRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bw': typeof BwRouteRouteWithChildren
  '/color': typeof ColorRouteRouteWithChildren
  '/crop': typeof CropRouteRouteWithChildren
  '/effects': typeof EffectsRouteRouteWithChildren
  '/export': typeof ExportRouteRouteWithChildren
  '/rotate': typeof RotateRouteRouteWithChildren
  '/bw/': typeof BwIndexRoute
  '/color/': typeof ColorIndexRoute
  '/crop/': typeof CropIndexRoute
  '/effects/': typeof EffectsIndexRoute
  '/export/': typeof ExportIndexRoute
  '/rotate/': typeof RotateIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bw': typeof BwIndexRoute
  '/color': typeof ColorIndexRoute
  '/crop': typeof CropIndexRoute
  '/effects': typeof EffectsIndexRoute
  '/export': typeof ExportIndexRoute
  '/rotate': typeof RotateIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/bw': typeof BwRouteRouteWithChildren
  '/color': typeof ColorRouteRouteWithChildren
  '/crop': typeof CropRouteRouteWithChildren
  '/effects': typeof EffectsRouteRouteWithChildren
  '/export': typeof ExportRouteRouteWithChildren
  '/rotate': typeof RotateRouteRouteWithChildren
  '/bw/': typeof BwIndexRoute
  '/color/': typeof ColorIndexRoute
  '/crop/': typeof CropIndexRoute
  '/effects/': typeof EffectsIndexRoute
  '/export/': typeof ExportIndexRoute
  '/rotate/': typeof RotateIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bw'
    | '/color'
    | '/crop'
    | '/effects'
    | '/export'
    | '/rotate'
    | '/bw/'
    | '/color/'
    | '/crop/'
    | '/effects/'
    | '/export/'
    | '/rotate/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/bw' | '/color' | '/crop' | '/effects' | '/export' | '/rotate'
  id:
    | '__root__'
    | '/'
    | '/bw'
    | '/color'
    | '/crop'
    | '/effects'
    | '/export'
    | '/rotate'
    | '/bw/'
    | '/color/'
    | '/crop/'
    | '/effects/'
    | '/export/'
    | '/rotate/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BwRouteRoute: typeof BwRouteRouteWithChildren
  ColorRouteRoute: typeof ColorRouteRouteWithChildren
  CropRouteRoute: typeof CropRouteRouteWithChildren
  EffectsRouteRoute: typeof EffectsRouteRouteWithChildren
  ExportRouteRoute: typeof ExportRouteRouteWithChildren
  RotateRouteRoute: typeof RotateRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BwRouteRoute: BwRouteRouteWithChildren,
  ColorRouteRoute: ColorRouteRouteWithChildren,
  CropRouteRoute: CropRouteRouteWithChildren,
  EffectsRouteRoute: EffectsRouteRouteWithChildren,
  ExportRouteRoute: ExportRouteRouteWithChildren,
  RotateRouteRoute: RotateRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bw",
        "/color",
        "/crop",
        "/effects",
        "/export",
        "/rotate"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/bw": {
      "filePath": "bw/route.tsx",
      "children": [
        "/bw/"
      ]
    },
    "/color": {
      "filePath": "color/route.tsx",
      "children": [
        "/color/"
      ]
    },
    "/crop": {
      "filePath": "crop/route.tsx",
      "children": [
        "/crop/"
      ]
    },
    "/effects": {
      "filePath": "effects/route.tsx",
      "children": [
        "/effects/"
      ]
    },
    "/export": {
      "filePath": "export/route.tsx",
      "children": [
        "/export/"
      ]
    },
    "/rotate": {
      "filePath": "rotate/route.tsx",
      "children": [
        "/rotate/"
      ]
    },
    "/bw/": {
      "filePath": "bw/index.tsx",
      "parent": "/bw"
    },
    "/color/": {
      "filePath": "color/index.tsx",
      "parent": "/color"
    },
    "/crop/": {
      "filePath": "crop/index.tsx",
      "parent": "/crop"
    },
    "/effects/": {
      "filePath": "effects/index.tsx",
      "parent": "/effects"
    },
    "/export/": {
      "filePath": "export/index.tsx",
      "parent": "/export"
    },
    "/rotate/": {
      "filePath": "rotate/index.tsx",
      "parent": "/rotate"
    }
  }
}
ROUTE_MANIFEST_END */
